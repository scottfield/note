[Scia Reto](https://sciareto.org) mind map   
> __version__=`1.1`,showJumps=`true`
---

# K8S concepts

## Deployment

### Pod

#### container type

##### Init Container<br/>always run to completion<br/>useful for secrets initializetion scenario
> align=`left`


##### Sidecar Container\(restartPolicy set to Always\)<br/>extend main container service e\.g\. <br/>logging,security,monitoring etc\.
> align=`left`


##### Ephemoral Container<br/>e\.g\. application troubeshooting
> align=`left`


##### App Container

###### probes

####### startup probe<br/>Indicates whether the application within the container is started<br/>suitable for long time startup application
> align=`left`


####### liveness probe<br/>Indicates whether the container is running<br/>kill container if probe failed
> align=`left`


####### readiness probe<br/>Indicates whether the container is ready for requests<br/>useful for maintainace purpose
> align=`left`


###### graceful shutdown

####### for springboot application, enable server\.shutdown=graceful<br/>add preStop hook to sleep for a while allow pending requests<br/>be processed before server shutdown
> align=`left`


#### Pod Disruption Budget

## Service

### provide service discovery functionality

### EndpointSlice

#### it will be created automatically by service object<br/>but you can also manually define one to add an external<br/>service to the k8s cluster
> align=`left`


### headless service

#### when you need to know all IPs of backend pods instead of<br/>loader balancer IP,common use cases are:<br/>stateful application<br/>Peer discovery<br/>service discovery<br/>distributed system
> align=`left`


## ReplicaSet

### common use cases:<br/>Stable, unique network identifiers\.<br/>Stable, persistent storage\.<br/>Ordered, graceful deployment and scaling\.<br/>Ordered, automated rolling updates\.
> align=`left`


## ReplicationController

## DaemonSet

### common usecases:<br/>running a cluster storage daemon on every node<br/>running a logs collection daemon on every node<br/>running a node monitoring daemon on every node
> align=`left`


## Jobs

### common use cases:<br/>to run a job riliablely to finish<br/>useful config:<br/>ttlSecondsAfterFinished\(control auto cleanup\)
> align=`left`


## Cronjob

### CronJob is meant for performing regular scheduled actions<br/> such as backups, report generation, and so on<br/>useful config:<br/>startingDeadlineSeconds<br/>concurrencyPolicy
> align=`left`


## cpu allocation

### login to pod and check cpu throttling<br/>cat /sys/fs/cgroup/cpu/cpu\.stat
> align=`left`


#### nr\_periods — Total schedule period

#### nr\_throttled — Total throttled period out of nr\_periods

#### throttled\_time — Total throttled time in ns

### cpu request

#### allocate cpu by propertional to cpu\.shares<br/>/sys/fs/cgroup/cpu,cpuacct/cpu\.shares
> align=`left`


### cpu limit

#### linux completely fair scheduler\(CFS\)

##### allocate by time period, each period is 100ms by default<br/>/sys/fs/cgroup/cpu,cpuacct/cpu\.cfs\_period\_us<br/>/sys/fs/cgroup/cpu,cpuacct/cpu\.cfs\_quota\_us
> align=`left`


## service exposure
> leftSide=`true`


### Ingress

### Gateway
> leftSide=`true`

