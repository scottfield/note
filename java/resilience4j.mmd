[Scia Reto](https://sciareto.org) mind map
> __version__=`1.1`,showJumps=`true`
---

# resilience4j

## bulkhead

### purpose:limit the number of concurrent calls at a time<br/>configs:<br/>maxConcurrentCalls<br/>maxWaitDuration
> align=`left`


#### SemaphoreBulkhead

#### FixedThreadPoolBulkhead

## ratelimiter

### purpose: limit total calls in given period of time<br/>configs:<br/>timeoutDuration<br/>limitRefreshPeriod<br/>limitForPeriod
> align=`left`


## circuitbreaker

### purpose:preventing a cascade of failures when a remote service is down<br/>configs:<br/>automaticTransitionFromOpenToHalfOpenEnabled<br/>failureRateThreshold<br/>ignoreException<br/>recordException<br/>recordResult<br/>maxWaitDurationInHalfOpenState<br/>waitDurationInOpenState<br/>minimumNumberOfCalls<br/>permittedNumberOfCallsInHalfOpenState<br/>slidingWindow\(count\-based or time\-based\)<br/>slowCallDurationThreshold<br/>slowCallRateThreshold
> align=`left`


#### CLOSED – everything is fine, no short\-circuiting involved
> align=`left`


#### OPEN – remote server is down, all requests to it are short\-circuited

#### HALF\_OPEN – a configured amount of time since entering OPEN state<br/> has elapsed and CircuitBreaker allows requests to check if the remote service is back online
> align=`left`


## retry

### purpose:auto retry failed call,increase service reliability<br/>configs:<br/>failAfterMaxAttempts<br/>maxAttempts<br/>ignoreExceptions<br/>retryExceptions<br/>retryOnException<br/>retryOnResult<br/>waitDuration<br/>intervalBiFunction
> align=`left`


## timelimiter

### purpose: avoid infinite waiting by limiting the amount of time spent<br/>         to calling a remote service<br/>configs:<br/>timeoutDuration<br/>cancelRunningFuture
> align=`left`


## cache\(JCache\)

### purpose:avoid unnecessary expensive call

## decorator based design, build on Vavr library
> leftSide=`true`

